@model Fakemail.Web.Models.UserModel

@{
    ViewData["Title"] = "fakemail.stream";
}

<div class="text-left">
    <h5><em>A fake SMTP server for software integration testing.</em></h5>
</div>

<br />

<p><span style="font-weight: 700">Welcome, @Model.Username.</span></p>
<p>Here are your SMTP settings =>
Host: <span class="sourcecode">fakemail.stream:587</span>
Username: <span class="sourcecode">@Model.SmtpCredentials.First().SmtpUsername</span>
Password: <span class="sourcecode">@Model.SmtpCredentials.First().SmtpPassword</span>
</p>

<table class="table">
    <thead>
        <tr>
            <th>Timestamp</th>
            <th>From</th>
            @if (Model.EmailAggregation == EmailAggregationModel.Received)
            {
                <th>Delivered-To</th>
            }
            else
            {
                <th>To</th>
                <th>CC</th>
                <th>BCC</th>
            }
            <th>Subject</th>
            <th>Body</th>
            <th>Attachments</th>
        </tr>
    </thead>
    <tbody>    
    @foreach (var emailSummary in @Model.EmailSummaries.OrderByDescending(x => x.SequenceNumber))
    {
        <tr>
            @{
                var timestamp = emailSummary.TimestampUtc.ToString("yyyy-MM-dd HH:mm:ss");
                var from = emailSummary.From;
                var subject = emailSummary.Subject;
                var body = emailSummary.Body;
                var attachments = string.Join("; ", emailSummary.Attachments.Select(x => x.Name));
            }

        <td>@timestamp</td>
        <td>@from</td>
        @if (Model.EmailAggregation == EmailAggregationModel.Received)
        {
            var to = ((ReceivedEmailSummaryModel)emailSummary).DeliveredTo;
            <td>@to</td>
        }
        else
        {
            <td>@(emailSummary as SentEmailSummaryModel).To</td>
            <td>@(emailSummary as SentEmailSummaryModel).CC</td>
            <td>@(emailSummary as SentEmailSummaryModel).BCC</td>
        }
        <td>@subject</td>
        <td>@body</td>
        <td>@attachments</td>
   
        </tr>    
    }
    </tbody>    
</table>

<div class="spinner-border" role="status"></div>
<br />
<span class="">Waiting for emails to arrive...</span>

<script>
window.onload = (event) => {
    var checkpoint = @Model.EmailSummaries.Max(x => (int?)x.SequenceNumber) ?? -1;
    RefreshTable();
}

function RefreshTable() {
    // JS object containing timestamp, from, delivered-to, subject, attachments.

}
</script>


