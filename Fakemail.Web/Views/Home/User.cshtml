@model Fakemail.Web.Models.UserModel

@using System.Linq;

@{
    ViewData["Title"] = "fakemail.stream";
}

<div class="text-left">
    <h5><em>A fake SMTP server for software integration testing.</em></h5>
</div>

<br />

<p><span style="font-weight: 700">Welcome, @Model.Username.</span></p>
<p>Here are your SMTP settings =>
Host: <span class="sourcecode">fakemail.stream:587</span>
Username: <span class="sourcecode">@Model.SmtpCredentials.First().SmtpUsername</span>
Password: <span class="sourcecode">@Model.SmtpCredentials.First().SmtpPassword</span>
</p>

<div id="_ReceivedEmailsTable">
    @await Html.PartialAsync("_ReceivedEmailsTable")
</div>

<div class="spinner-border" role="status"></div>
<br />
<span class="">Waiting for emails to arrive...</span>

<script type="text/javascript">
    var sequenceNumber = 0;

    window.onload = (event) => {
        @if (Model.EmailSummaries.Any())
    {
       <text>sequenceNumber=@Model.EmailSummaries.Max(x => x.SequenceNumber);</text>
    }
        setTimeout(() => RefreshTable(), 10000);
    }

    function RefreshTable() {
        fetch("@Model.UserId/update/" + sequenceNumber, {
            method: 'GET'
        }).then(response => response.text())
        .then(data => {
            if (data.length > 2) {
                $('#_ReceivedEmailsTbody:first').prepend(data);
                sequenceNumber = $('tr[sequenceNumber]:first').attr("sequenceNumber")
            }
        })
        setTimeout(() => RefreshTable(), 10000);
    }
</script>


