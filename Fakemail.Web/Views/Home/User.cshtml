@model Fakemail.Web.Models.UserModel

@using System.Linq;

@{
    ViewData["Title"] = "fakemail.stream";
}

<div class="text-left">
    <h5><em>A fake SMTP server for software integration testing.</em></h5>
</div>

<br />

<p><span style="font-weight: 700">Welcome, @Model.Username.</span></p>
<p>Here are your SMTP settings =>
Host: <span class="sourcecode copyable-text" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy to clipboard">fakemail.stream:587</span>
Username: <span class="sourcecode copyable-text" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy to clipboard">@Model.SmtpCredentials.First().SmtpUsername</span>
Password: <span class="sourcecode copyable-text" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy to clipboard">@Model.SmtpCredentials.First().SmtpPassword</span>
</p>

<button class="btn btn-secondary btn-sm" onclick="InjectTestEmail('@Model.UserId', '@Model.SmtpCredentials.First().SmtpUsername')">Inject test email</button>
<button class="btn btn-secondary btn-sm" onclick="DeleteAllEmails('@Model.UserId', '@Model.SmtpCredentials.First().SmtpUsername')">Delete all</button>

<div id="_EmailSummaryTable">
    @await Html.PartialAsync("_EmailSummaryTable")
</div>

<div class="spinner-border" role="status"></div>
<br />
<span class="">Waiting for emails to arrive...</span>

<iframe id="download_iframe" style="display:none;"></iframe>

@section Scripts {
<script type="text/javascript">

    var sequenceNumber = 0;

    window.onload = (event) => {
        @if (Model.EmailSummaries.Any())
        {
        <text>sequenceNumber=@Model.EmailSummaries.Max(x => x.SequenceNumber);</text>
        }
        setTimeout(() => UpdateTable(false), 10000);
    }

    function UpdateTable(isOneOff) {
        var nextUpdate = 60000;

        fetch("@Model.UserId/smtpuser/@Model.SmtpCredentials.First().SmtpUsername/update/" + sequenceNumber, {
            method: 'GET'
        })
        .then(response => {
          if (response.ok) {
            return response.text();
          } else {
            throw Error(response.statusText);
          }
        })
        .then(data => {
            if (data.length > 2) {
                $('#_EmailSummaryTableBody:first').prepend(data);
                sequenceNumber = $('tr[sequenceNumber]:first').attr("sequenceNumber")
                nextUpdate = 5000;
            }
        })
        .catch(error => {
          console.log(error);
        });

        if (!isOneOff) {
            setTimeout(() => UpdateTable(false), nextUpdate);
        }
    }

    function InjectTestEmail(userId, smtpUsername) {
        var url = userId + '/smtpuser/' + smtpUsername + '/inject-test';
        fetch(url, {
            method: 'GET'
        })
        .then(response => UpdateTable(true));

        // TODO: error handling
    };

    function DeleteAllEmails(userId, smtpUsername) {
        var url = userId + '/smtpuser/' + smtpUsername + '/email/*';
        fetch(url, {
            method: 'DELETE'
        })
        .then(response => { 
            sequenceNumber = 0;
            $('#_EmailSummaryTableBody').empty();
        });

        // TODO: error handling
    };
    
    function DownloadEmail(emailId) {
        var url = '@Model.UserId/email/' + emailId;
        document.getElementById('download_iframe').src = url;
    };

    function DeleteEmail(emailId) {
        $(".tr[emailId='" + emailId + "']").remove();

        var url = '@Model.UserId/email/' + emailId;
        fetch(url, {
            method: 'DELETE'
        })
        .then(response => response.text())
        .then(data => {
            // TODO: display notification
            $("tr[emailId='" + emailId + "']").remove();
        });
    }

</script>
}


